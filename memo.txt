三角関数（sine, cosine）の近似計算について

前書き

	個人用のメモ

参考サイト
	
	グラフ画像
	http://upload.wikimedia.org/wikipedia/commons/7/71/Sine_cosine_one_period.svg
	
	テーブル引きの場合に線形補間したくなる…。
	https://fgiesen.wordpress.com/2012/08/15/linear-interpolation-past-present-and-future/
	
	Another fast fixed-point sine approximation
	http://www.coranac.com/2009/07/sines/
	
	Nintendo DS: Sine approximation using fixed point math
	http://console-dev.de/wordpress/?p=138
	
	cosineの表引き
	http://mibai.tec.u-ryukyu.ac.jp/~oshiro/Doc/misc/SinCos_Table.html
	
	32ビット整数の、定数での除算
	http://www.recfor.net/blog/mycom/index.php?itemid=902
	
	ラジアンを用いる理由
	http://ja.wikipedia.org/wiki/%E3%83%A9%E3%82%B8%E3%82%A2%E3%83%B3#.E3.83.A9.E3.82.B8.E3.82.A2.E3.83.B3.E3.82.92.E7.94.A8.E3.81.84.E3.82.8B.E7.90.86.E7.94.B1
	
	Advantages of measuring in radians
	http://en.wikipedia.org/wiki/Radian#Advantages_of_measuring_in_radians
	
	フリー計算
	http://keisan.casio.jp/calculator
	
テーブル引きで求めるやり方
	
	個人的には以下の理由からテーブル引きをしたくない。
		
		インターネットの情報を見るとテーブル引きについて否定的な情報が多いのでそれを鵜呑みにしている。
			テーブル引きをするとキャッシュを食うので他のコード実行に悪影響を与える恐れが。
			最近のプロセッサの演算速度に比べてメモリアクセスはとても遅いのでテーブル引きするより計算させた方が良いのでは？（キャッシュヒット率によるとは思うけれど）
		
		ROMサイズというか大きいテーブルを持ってメモリをふんだんに消費するのは何だか富豪的でいまいち気が引ける。貧乏性…。
		
	ただテーブル引きの方が
		
		一般的な手法で好まれている。
		
		解りやすくて色々な個所で使われている。
		
		素早く実装出来る筈だと思われている？？
		
		精度についてもそこそこのサイズのテーブル引きで十分だという考えがある。
			ケースバイケース、ちゃんと結果を精査しないとそうとも言い切れない気がする。
			
		テーブル引きでは無い手法と比べて、テーブル引きの方が同じ処理時間で精度が高い結果を得られると思っているフシがあるような感じ。
			ちゃんと比較して検証しないと白黒付けられない。
			インターネットで参照出来る色々なページではそれを否定しているようだけれど、
			それを読んで考えたり検討してもらえるかというとそんな暇は無いと言われるのがオチ…。
			
	まぁ求める精度とかプログラムを実行するターゲットによって、どの手法が適しているのか多少事情は異なってくると思う。
	例えば数MHzのZ80とかがターゲットの場合はテーブル引きの方が良いのかも？
	
	テーブルで保持する範囲について
		
		対称性を利用して90度まで引ければ問題無い。
		対称性を考慮して反転させる必要はある。
	
	Degree 単位のままテーブル引きしたい。
		
		そうしたい理由
			
			正規化計算の演算コストが気になる。
			正規化する際に精度が失われないか気になる。
			
		そうしない理由
			
			正規化しない場合、分岐処理をせずに範囲の限定や処理結果の補正を行う方法が分からない。
			modulo が速いならば -2π(-360°) 〜 +2π(360°)の範囲に限定出来るけれど、大体遅い。
			正規化のコストや精度を気にするぐらいならば、最初から正規化された角度で保持して近似sine関数に渡すべきでは？
			Degreeを算出する際にそもそも演算が入っているとしたらそこで精度落ちが発生する可能性も有る。
			
			まぁ整数値をそのまま表引きのindexに使えたら良いんだけれど、精度を上げると整数値が大きくなって表サイズが増える…。
		
			逆数の乗算と右シフトのコストは、moduloよりとても小さい筈
			正規化した場合は分岐せずに範囲の限定や処理結果の補正が出来る。
			という事でDegreeでの表引きは諦める。
		
分岐について

	一般的に分岐があると処理速度が遅くなる。
	
	ただし分岐を排除するためにトリッキーな演算をすると記述はややこしくなる。
	
	そもそもテーブル引きしたくなるぐらい処理速度が問題なら、トリッキーな記述を我慢するべきだとも思うけれど、
	トリッキーな記述は実装に時間が掛かり、バグが生じやすく、デバッグがしにくく、実装者以外の人が記述を理解しにくい。
	つまりちょっと難解…。
	
sine関数の入力の角度の正規化、とか

	-1(-2π) 〜 +1(+2π) の範囲に折り返して正規化する。

		割り算(逆数の乗算でも可)を行った後に小数部の値だけを取得する事によって折り返して正規化
		固定小数点の場合は 小数部の AND で小数部だけに限定する事が可能

	角度が負の値の場合の対策
		
		角度が負の値の場合、処理結果が負になる。（絶対値は同じ）
		
		角度を絶対値にして処理する。
		処理結果の値の符号を反転して上下反転する。
		
		Compute the integer absolute value (abs) without branching 
		https://graphics.stanford.edu/~seander/bithacks.html#IntegerAbs

		Compute the sign of an integer 
		https://graphics.stanford.edu/~seander/bithacks.html#CopyIntegerSign

		Conditionally negate a value without branching
		https://graphics.stanford.edu/~seander/bithacks.html#ConditionalNegate

	正の値の正規化された範囲の値 0 〜 +1(+2π)を 0 〜 0.5(+π)の値に折り返して制限する。
		
		絶対値が 0.5(+π)以上の場合は入力角度を折り返し、処理結果の符号を反転させる。
		
			入力値の角度が負の値の場合に処理結果の符号を反転させるのと併せる
			
				入力角度が正の値の場合
					0.5以下の場合、処理結果の符号が正
					絶対値が0.5以上の場合、処理結果の符号が負
					
				入力角度が負の値の場合
					0 〜 -0.5 の場合、処理結果の符号が負
					-0.5 〜 -1.0 の場合、処理結果の符号が正
				
				にする。
		
		固定小数点であれば、0.5（π）以上かどうかはビットで判断可能
		ANDで0〜0.5までのビットに限定して折り返しが出来る。
		
	0.25（π/2）を超えていたら、左右に反転する。

		0.5（π）から引く事により左右反転が可能。
		正負符号は反転する必要はない。
		
		border = input & border_bit
		frac = input & frac_bits
		abs(border - frac)

---------------
Madhava of Sangamagrama power series expansion

計算単位は radian
sin q = q - q3/3! + q5/5! - q7/7! + ...
cos q = 1 - q2/2! + q4/4! - q6/6! + ... 

2! = 2
4! = 24
6! = 720
8! = 40320

1
3! = 6
5! = 120
7! = 5040
9! = 362880

計算単位が degree の場合
sin x(deg) = deg2rad * x - (deg2rad^3 * x^3/3!) + (deg2rad^5 * x^5/5!) - (deg2rad^7 * x^7/7!)
 = x * (nrm2rad * x^2 * (-(nrm2rad^3)/6 + x^2 * (+nrm2rad^5/120 + x^2 * (-nrm2rad^7/5040 + x^2 * nrm2rad^9/362880))))


